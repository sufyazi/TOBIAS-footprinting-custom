#!/usr/bin/env bash

# check if argument is provided
if [ $# -ne 2 ]; then
	echo "No arguments provided. Please provide the path to the tobias_out_root folder and the path to the run list text file."	
	exit 1
fi

tobias_out_root=$1
run_list=$2


# grab the run listed in the run list text file and put it in an array
readarray -t runs < "${run_list}"

# loop through the array for each run directory in the tobias_out_root 
for run in "${runs[@]}"; do
    echo "Current run directory: ${run}"
    # get the path of the sample directory in the run directory
    readarray -t sample_dir < <(find "${tobias_out_root}/${run}" -maxdepth 1 -mindepth 1 -type d -name "*sample*")

    # check if the sample directory is empty; if it is empty, skip
    if [ -z "${sample_dir[0]}" ]; then
        echo "Sample directory is non-existent in the ${run} directory. Skipping..."
        continue
    else
        # check elements in the array
        # print the first element
        echo "Sample directory count: " "${#sample_dir[@]}"
        # loop through the rest of the elements in the array
        for ((i=0; i<${#sample_dir[@]}; i++)); do
            echo "Sample directory $((i+1)): " "${sample_dir[i]}"
            # get the basename of the sample directory
            sample_dir_name=$(basename "${sample_dir[i]}")
            # get the analysis ID from the basename
            analysis_id=$(echo "${sample_dir_name}" | cut -d'_' -f1)
            # get the sample ID from the basename
            sample_id=$(echo "${sample_dir_name}" | cut -d'_' -f2)
            echo "Analysis ID: ${analysis_id}" "Sample ID: ${sample_id}"
            # find specific files in the sample directory and put them in an array
            readarray -t files < <(find "${sample_dir[i]}" -type f \( -name "*_corrected.bw" -o -name "*_footprints.bw" -o -name "*_overview.txt" -o -name "bindetect_results.txt" \))
            for file in "${files[@]}"; do
                echo "File: ${file}"
                if [[ "$file" == *_overview.txt ]]; then
                    # check the number of columns
                    echo "Checking the number of columns in ${file}..."
                    # get the number of columns
                    num_cols=$(awk '{print NF; exit}' "${file}")
                    echo "Number of columns in ${file} is ${num_cols}."
                    # if [[ "$num_cols" -eq 11 ]]; then
                    #     echo "Number of columns in ${file} is ${num_cols}."
                    #     echo "This means that the file has been truncated already. Skipping..."
                    # elif [[ "$num_cols" -eq 12 ]]; then
                    #     echo "Number of columns in ${file} is ${num_cols}."
                    #     echo "Column number is 12. Truncating the ${file}..."
                    #     echo "Printing the header first..."
                    #     # print header with awk
                    #     awk -F'\t' 'NR == 1' "${file}"
                    #     # truncate with awk by dropping the 10th column
                    #     awk 'BEGIN {OFS="\t"} {$10=""; sub("\t\t", "\t"); print}' "${file}" > "${file}".tmp && mv "${file}".tmp "${file}"
                    #     echo "Truncation of ${file} is done."
                    # # check if the number of columns is less than 11
                    # elif [[ "$num_cols" -lt 11 ]]; then
                    #     echo "Number of columns in ${file} is ${num_cols}."
                    #     echo "Column number is less than 11. Check the problematic ${file}."
                    #     echo "Printing the header..."
                    #     # print header with awk
                    #     awk -F'\t' 'NR == 1' "${file}"
                    #fi 
                fi
            done
            mkdir -p /home/users/ntu/suffiazi/scratch/outputs/filtered-tobias/"${analysis_id}"/"${analysis_id}"_"${sample_id}"/
            # transfer the files to a new directory
            if rsync -avPhz "${files[@]}" /home/users/ntu/suffiazi/scratch/outputs/filtered-tobias/"${analysis_id}"/"${analysis_id}"_"${sample_id}"/; then
                echo "Select output files have been copied to a new location."
            else
                echo "Select output files failed to be copied!"
            fi
        done
    fi
done

echo "Done!"